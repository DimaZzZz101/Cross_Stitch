#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os


class TO_SVG:
    SVG = ''  # Переменная для хранения svg-кода, который будет представлять собой svg-изображение.

    def __init__(self, colour=False, stroke=False, keys=False):
        """
        Инициализация оптиметров для будущих изображений.

        :param colour: False -> черно-белое; True -> цветное;
        :param stroke: False -> без разделите; True -> с разделителей;
        :param keys: False -> без символов; True -> с символами;
        """
        self.colour_ = colour
        self.stroke_ = stroke
        self.keys_ = keys

    def start_svg(self, width, height):
        """
        Определение общих параметров svg-изображения (записываем общие теги для данной картинки в файл).

        :param width: ширина изображения.
        :param height: высота изображения.
        :return:
        """
        self.SVG += '<svg xmlns="http://www.w3.org/2000/svg" width="' + str(width) + '" height="' + str(height) + '" style ="fill:none;">'

        self.SVG += '<style>.svg_txt{font-size:20px;}.glyph{stroke:#000000;stroke-width:2;stroke:2;}</style>'

    def add_pixel(self, palette, index, x, y, size):
        """
        Определение пикселя svg-паттерна (с иконками/без иконок).

        :param palette: палитра, из которой берем цвет для окрашивания пикселя.
        :param index: пиксель в строке.
        :param x: координата x пикселя.
        :param y: координата y пикселя.
        :param size: размер пикселя.
        """

        icon_size = size / 20.0

        # Определение параметра заливки для пикселя изображения.
        fill = 'fill:rgb(255,255,255);' if not self.colour_ else 'fill:' + self.get_rgb_from_dmc(palette[index])

        # Определение параметра для границ пикселя.
        stroke = 'stroke:rgb(20,20,20);stroke-width:1;' if self.stroke_ else 'stroke:none;'

        # Генерируем символ для данного цвета, если значение keys == True, иначе паттерн будет без иконок.
        icon = self.generate_icon(index, x, y, icon_size, fill) if self.keys_ else ''

        # Вставляем строку в svg-код.
        self.SVG += '<rect x="' + str(x) + '" y="' + str(y) + '" width="' + str(size) + '" height="' + str(
            size) + '" style="' + fill + stroke + '"/>' + icon

    def add_grid(self, width, height, size):
        """
        Нанесение сетки на svg-изображение, чтобы ориентироваться при вышивании (делит картинку на блоки пикселей).

        :param width: ширина картинки.
        :param height: высота картинки.
        :param size: размер блока.
        """
        # Построение вертикальных линий сетки.
        for x in range(size + size * 10, width, size * 10):
            self.SVG += "<line x1=\"" + str(x) + "\" y1=\"" + str(size) + "\" x2=\"" + str(x) + "\" y2=\"" + str(
                height) + "\" style=\"stroke:black;stroke-width:1.75\" />"

        # Построение горизонтальных линий сетки.
        for y in range(size + size * 10, height, size * 10):
            self.SVG += "<line x1=\"" + str(size) + "\" y1=\"" + str(y) + "\" x2=\"" + str(width) + "\" y2=\"" + str(
                y) + "\" style=\"stroke:black;stroke-width:1.75\" />"

    def create_key(self, x, y, size, index, colour):
        """
        Создание ключа для паттерна: иконка - название цвета - код цвета.

        :param x: координата x для позиционирования отрисовки.
        :param y: координата y для позиционирования отрисовки.
        :param size: размер ячейки таблицы.
        :param index: параметр для определения символа.
        :param colour: цвет, определяющий параметр заливки.
        """

        # Задаем рамер иконки.
        icon_size = size / 20.0

        # Определение параметра заливки для текущей ячейки таблицы.
        fill = 'fill:rgb(255,255,255)' if not self.colour_ else 'fill:rgb(' + str(colour[0]) + ', ' + str(colour[1]) + ', ' + str(colour[2]) + ');'

        # Определение параметра для границ ячеек таблицы.
        stroke = 'stroke:rgb(20,20,20);stroke-width:1;' if self.stroke_ else 'stroke:none;'

        # Генерируем символ для данного цвета, если значение keys == True, иначе паттерн будет без иконок.
        icon = self.generate_icon(index, x, y, icon_size, fill) if self.keys_ else ''

        # Записываем параметр для вставки иконки в svg-файл.
        self.SVG += '<rect x="0" y="' + str(y) + '" width="' + str(size) + '" height="' + str(size) + '" style="' + fill + stroke + '"/>' + icon

        # Записываем параметр для вставки названия цвета в svg-файл.
        self.SVG += '<rect x="' + str(size) + '" y="' + str(y) + '" width="' + str(size * 10) + '" height="' + str(size) + '" style="fill:rgb(255,255,255);stroke:black;stroke-width:1;"/>'
        self.SVG += '<text x = "' + str(x + size * 1.5) + '" y = "' + str(y + size / 2.0) + '" fill="black">' + colour[3] + '</text>'

        # Записываем параметр для вставки кода цвета (DMC) в svg-файл.
        self.SVG += '<rect x="' + str(size * 11) + '" y="' + str(y) + '" width="' + str(size * 2) + '" height="' + str(size) + '" style="fill:rgb(255,255,255);stroke:black;stroke-width:1;"/>'
        self.SVG += '<text x = "' + str(size * 11 + (size / 2.0)) + '" y = "' + str(y + size / 2.0) + '" fill="black">' + colour[4] + '</text>'

    def add_center_arrows(self, size, width, height):
        """
        Нанесение центрирующих стрелок на svg-изображение, чтобы ориентироваться при вышивании.

        :param size: параметр для позиционирования центрирующих стрелок.
        :param width: ширина изображения.
        :param height: высота изображения.
        """

        # Координаты стрелки.
        x = str(size / 2)
        y = str(size)

        # Горизонтальная центрирующая стрелка.
        path_x = "d=\"M0 " + x + "L" + y + " " + x + "M" + x + " 0L" + y + " " + x + " " + x + " " + y + "\""
        self.SVG += "<path " + path_x + " stroke=\"black\" stroke-width=\"2\" fill=\"none\" transform='translate(0 " + str(height / 2 + size /2) + ")'/>"

        # Вертикальная центрирующая стрелка.
        path_y = "d=\"M" + x + " 0L" + x + " " + y + " M" + y + " " + x + "L" + x + " " + y + " 0 " + x + "\""
        self.SVG += "<path " + path_y + " stroke=\"black\" stroke-width=\"2\" fill=\"none\" transform='translate(" + str(width / 2 + size / 2) + " 0)'/>"

    def save(self, filename):
        """
        Сохранение svg-изображения.

        :param filename: имя файла без расширения.

        Сохраняется следующим образом:
            корневая директория -> директория patterns -> директория filename
                                                                        ├──> filename_no_icons.svg
                                                                        ├──> filename_with_icons.svg
                                                                        ├──> key_for_pattern.svg
                                                                        └──> filename_black_and_white.svg
        """
        self.SVG += '</svg>'
        directories = filename.split('/')
        if not os.path.isdir(f'{directories[0]}/{directories[1]}'):
            os.makedirs(f'{directories[0]}/{directories[1]}')
        svg = open(filename, 'w')
        svg.write(self.SVG)
        svg.close()

    @staticmethod
    def get_rgb_from_dmc(item):
        """
        Перевод DMC-цвета в систему RGB.

        :param item: берем три составляющие цвета (rgb) из записи словаря палитры DMC.
        :return: параметр, определяющий цвет заливки.
        """
        return 'rgb(' + str(item[0]) + ',' + str(item[1]) + ',' + str(item[2]) + ');'

    @staticmethod
    def generate_icon(item, x, y, scale_value, fill):
        """
        Генерация svg-иконки.

        :param item: текущий символ.
        :param x: координата x расположения иконки.
        :param y: координата y расположения иконки.
        :param scale_value: размер символа
        :param fill: заливка символа.
        :return: параметр определяющий svg-иконку.
        """

        # Координаты svg-иконки.
        x = str(x)
        y = str(y)

        # Коды svg-иконок.
        codes = {
            # Обратный слеш.
            0: "d='M4 4L16 16'",
            # Сердце.
            1: "d='M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z'",
            # Черный квадрат среднего размера.
            2: "d='M7 7L7 13 13 13 13 7Z'",
            # Треугольник без заливки.
            3: "d='M4 4L10 16L16 4 Z'",
            # Диагональный крест.
            4: "d='M4 4L16 16M4 16 L16 4'",
            # Большой квадрат без заливки.
            5: "d='M4 4L4 16 16 16 16 4Z'",
            # Черный треугольник.
            6: "d='M4 4L10 16L16 4 Z'",
            # Черный ромб.
            7: "d='M10 4L6 10 10 16 14 10Z'",
            # Маленький квадрат без заливки.
            8: "d='M8 8L8 12 12 12 12 8Z'",
            # Звезда из двух крестов: прямого и диагонального.
            9: "d='M4 4L16 16M4 16 L16 4M10 4L10 16M4 10L16 10'",
            # Черный шестиугольник.
            10: "d='M5.03932+6.96458L9.67176+4.46577C9.87492+4.35583+10.1251+4.35583+10.3282+4.46577L14.9607+6.96458C15.1672+7.07578+15.2942+7.28255+15.2942+7.50682L15.2942+12.4932C15.2942+12.7174+15.1672+12.9242+14.9607+13.0354L10.3282+15.5342C10.1251+15.6442+9.87492+15.6442+9.67176+15.5342L5.03932+13.0354C4.83284+12.9242+4.70578+12.7174+4.70578+12.4932L4.70578+7.50682C4.70578+7.28255+4.83284+7.07577+5.03932+6.96458Z'",
            # Символ Фи.
            11: "d='M10+15.8665L10+6.67565C10+6.67565+9.94301+4.13349+11.4996+4.13349C13.0562+4.13349+14.4988+5.82305+14.4988+7.9522C14.4988+7.9522+14.4673+11.9555+10+11.9555M7.21523+4.52459C6.23298+5.14253+5.50117+6.43629+5.50117+7.9522C5.50117+7.9522+5.53266+11.9555+10+11.9555'",
            # Знак зодиака Рак.
            12: "d='M14+6.5C12.6193+6.5+11.5+7.61929+11.5+9C11.5+10.3807+12.6193+11.5+14+11.5C15.3807+11.5+16.5+10.3807+16.5+9C16.5+7.61929+15.3807+6.5+14+6.5ZM15.729+7.208C15.729+7.208+13.314+4.5+9.5+4.5C5.831+4.5+3.5+6.5+3.5+6.5M6+8.5C4.61929+8.5+3.5+9.61929+3.5+11C3.5+12.3807+4.61929+13.5+6+13.5C7.38071+13.5+8.5+12.3807+8.5+11C8.5+9.61929+7.38071+8.5+6+8.5ZM4.354+12.917C4.354+12.917+6.686+15.5+10.5+15.5C14.169+15.5+16.5+13.5+16.5+13.5'",
            # Знак зодиака Близнецы.
            13: "d='M3.09932+2.7776C3.09932+2.7776+5.98506+4.09076+10.0627+4.09076C14.1404+4.09076+16.9007+2.7776+16.9007+2.7776M16.9007+17.2224C16.9007+17.2224+14.0149+15.9092+9.93727+15.9092C5.85959+15.9092+3.09932+17.2224+3.09932+17.2224M13.1367+16.1719L13.1367+3.82813M6.86333+3.82813L6.86333+16.1719'",
            # Три круга (пропеллер)
            14: "d='M15.0559+10.1188C13.8564+9.57796+12.463+10.167+11.9495+11.4318C11.5296+12.4678+11.9721+13.7422+12.8976+14.16C13.808+14.5707+14.6884+14.0429+14.9827+13.3184L13.9461+12.8506C13.8874+12.9944+13.6501+13.206+13.3412+13.067C13.0239+12.9237+12.795+12.3715+12.9861+11.8996C13.255+11.2375+13.9844+10.929+14.6123+11.2119C15.4691+11.5982+15.8676+12.6473+15.5012+13.5508C15.0125+14.755+13.6862+15.3155+12.5442+14.8007C11.0651+14.1339+10.4417+12.2901+11.2691+10.8689C12.2054+9.54765+13.9449+8.64004+13.9449+6.07471C13.9449+4.10851+12.4286+2.50964+10.5646+2.50964C9.01105+2.50964+7.74729+3.84223+7.74729+5.48033C7.74729+6.85572+8.80869+7.97552+10.1136+7.97552C11.1823+7.97552+12.1192+7.04473+12.1192+5.98318C12.1197+4.93886+11.3131+4.29277+10.5657+4.29277L10.5657+5.48152C10.7145+5.48152+10.9918+5.62893+10.9918+5.98318C10.9918+6.34693+10.6001+6.78677+10.1136+6.78677C9.43043+6.78677+8.87464+6.20072+8.87464+5.48033C8.87464+4.49783+9.63279+3.69839+10.5646+3.69839C11.8069+3.69839+12.8176+4.76411+12.8176+6.07412C12.8176+7.79305+11.6209+9.04778+10.0009+9.04778C8.38086+9.04778+8.23938+8.4534+6.6188+8.4534C6.50832+8.4534+6.39671+8.46232+6.2851+8.4748C6.26199+8.47718+6.23888+8.48134+6.21577+8.48431C6.147+8.49382+6.0788+8.50393+6.01116+8.5176C5.95535+8.52829+5.90011+8.54078+5.84543+8.55445C5.80992+8.56336+5.77667+8.57287+5.74228+8.58238C5.68028+8.60021+5.61827+8.61745+5.55739+8.63885C5.55289+8.64063+5.54838+8.64241+5.54387+8.6442C4.204+9.11792+3.23504+10.4517+3.23504+12.022C3.23504+13.6595+4.49824+14.9915+6.05174+14.9915C7.35609+14.9915+8.41806+13.8723+8.41806+12.4963C8.41806+11.3694+7.53534+10.3816+6.52861+10.3816C5.53879+10.3816+4.92551+11.2321+4.92551+12.0197L6.05287+12.0197C6.05287+11.8627+6.19266+11.5703+6.52861+11.5703C6.87358+11.5703+7.29071+11.9834+7.29071+12.4963C7.29071+13.2167+6.73492+13.8028+6.05174+13.8028C5.11998+13.8028+4.36183+13.0039+4.36183+12.0214C4.36183+10.7114+5.37251+9.64572+6.61486+9.64572C6.80143+9.64572+6.98068+9.66652+7.15486+9.69803C7.20785+9.70873+7.25914+9.7218+7.30987+9.73488C7.38822+9.7539+7.46263+9.77946+7.5376+9.80442C8.02856+9.98749+8.39721+10.3037+8.67623+10.6573C8.67454+10.6609+8.67397+10.6639+8.67228+10.668C9.67168+11.8954+9.17847+14.4958+12.1006+15.8926C13.7984+16.7039+15.8045+15.8243+16.5379+14.0174C17.1489+12.5118+16.4843+10.7626+15.0559+10.1188Z'",
            # Знак зодиака Скорпион.
            15: "d='M2.02221+2.99924C2.02221+2.99924+4.01666+4.08622+4.01666+6.59856C4.01666+9.1109+4.01666+15.6307+4.01666+15.6307M4.01666+6.32332C4.01666+5.17851+5.60291+2.99924+6.34351+2.99924C7.08345+2.99924+8.67037+5.44843+8.67037+6.32332C8.67037+7.19822+8.67037+15.6307+8.67037+15.6307M17.9778+17.6252C13.9184+17.6252+13.3241+17.0953+13.3241+14.3011C13.3241+14.3011+13.3241+7.19822+13.3241+6.32332C13.3241+5.44843+11.7372+2.99924+10.9972+2.99924C10.2566+2.99924+8.67037+5.17851+8.67037+6.32332M16.6482+16.2956L17.9778+17.6252L16.6482+18.9548'",
            # Елка.
            16: "d='M15.8122+15.9826L4.18785+15.9826L10.0646+9.04513L15.8122+15.9826ZM14.5206+11.7344L5.47944+11.7344L10.0646+6.3559L14.5206+11.7344ZM13.1967+7.83692L6.80332+7.83692L10.0323+4.01743L13.1967+7.83692Z'",
            # Символ command.
            17: "d='M14.6878+12.312C15.9828+12.312+17.0316+13.3466+17.0316+14.624C17.0316+15.9013+15.9828+16.936+14.6878+16.936C13.3928+16.936+12.3439+15.9013+12.3439+14.624L12.3439+12.312L14.6878+12.312ZM14.6878+7.68801C15.9828+7.68801+17.0316+6.6534+17.0316+5.37603C17.0316+4.09865+15.9828+3.06404+14.6878+3.06404C13.3928+3.06404+12.3439+4.09865+12.3439+5.37603L12.3439+7.68801L14.6878+7.68801ZM5.31223+7.68801C4.01724+7.68801+2.96835+6.6534+2.96835+5.37603C2.96835+4.09865+4.01724+3.06404+5.31223+3.06404C6.60723+3.06404+7.65612+4.09865+7.65612+5.37603L7.65612+7.68801L5.31223+7.68801ZM5.31223+12.312C4.01724+12.312+2.96835+13.3466+2.96835+14.624C2.96835+15.9013+4.01724+16.936+5.31223+16.936C6.60723+16.936+7.65612+15.9013+7.65612+14.624L7.65612+12.312L5.31223+12.312ZM7.65612+7.68801L12.3439+7.68801L12.3439+12.312L7.65612+12.312L7.65612+7.68801Z'",
            # Корона.
            18: "d='M10+1.6018L10+5.72487M8.02812+3.66333L11.9719+3.66333M10+5.72487C9.27397+5.72487+8.68541+6.34019+8.68541+7.09923C8.68541+7.85826+9.27397+8.47358+10+8.47358C10.726+8.47358+11.3146+7.85826+11.3146+7.09923C11.3146+6.34019+10.726+5.72487+10+5.72487ZM4.74165+14.6582L15.2583+14.6582L15.2583+16.7197L4.74165+16.7197L4.74165+14.6582ZM13.6151+14.6582C15.612+14.6582+17.2302+12.9664+17.2302+10.8787C17.2302+8.79106+15.612+7.09923+13.6151+7.09923C11.6183+7.09923+10+8.79106+10+10.8787M6.38488+14.6582C4.38803+14.6582+2.76977+12.9664+2.76977+10.8787C2.76977+8.79106+4.38803+7.09923+6.38488+7.09923C8.38174+7.09923+10+8.79106+10+10.8787M10+10.5351L10+14.6582'",
            # Две параллельные полосы.
            19: "d='M2.7426+5.7528L17.2574+5.7528L17.2574+7.45168L2.7426+7.45168L2.7426+5.7528ZM2.7426+12.5483L17.2574+12.5483L17.2574+14.2472L2.7426+14.2472L2.7426+12.5483Z'",
            # Знак доллара.
            20: "d='M8.85574+5.57872L11.1443+5.57872C12.0906+5.57872+12.8606+6.23995+12.8606+7.05248C12.8606+7.32365+13.117+7.54373+13.4328+7.54373C13.7486+7.54373+14.0049+7.32365+14.0049+7.05248C14.0049+5.6981+12.7216+4.59622+11.1443+4.59622L10.5721+4.59622L10.5721+3.12246C10.5721+2.85129+10.3158+2.6312+10+2.6312C9.68418+2.6312+9.42787+2.85129+9.42787+3.12246L9.42787+4.59622L8.85574+4.59622C7.27838+4.59622+5.99509+5.6981+5.99509+7.05248L5.99509+8.03499C5.99509+9.38937+7.27838+10.4913+8.85574+10.4913L11.1443+10.4913C12.0906+10.4913+12.8606+11.1525+12.8606+11.965L12.8606+12.9475C12.8606+13.7601+12.0906+14.4213+11.1443+14.4213L10.5721+14.4213L10.5721+11.4738C10.5721+11.2026+10.3158+10.9825+10+10.9825C9.68418+10.9825+9.42787+11.2026+9.42787+11.4738L9.42787+14.4213L8.85574+14.4213C7.90944+14.4213+7.13935+13.7601+7.13935+12.9475C7.13935+12.6763+6.88304+12.4563+6.56722+12.4563C6.2514+12.4563+5.99509+12.6763+5.99509+12.9475C5.99509+14.3019+7.27838+15.4038+8.85574+15.4038L9.42787+15.4038L9.42787+16.8775C9.42787+17.1487+9.68418+17.3688+10+17.3688C10.3158+17.3688+10.5721+17.1487+10.5721+16.8775L10.5721+15.4038L11.1443+15.4038C12.7216+15.4038+14.0049+14.3019+14.0049+12.9475L14.0049+11.965C14.0049+10.6106+12.7216+9.50875+11.1443+9.50875L10.5721+9.50875L10.5721+6.56123C10.5721+6.29006+10.3158+6.06998+10+6.06998C9.68418+6.06998+9.42787+6.29006+9.42787+6.56123L9.42787+9.50875L8.85574+9.50875C7.90944+9.50875+7.13935+8.84752+7.13935+8.03499L7.13935+7.05248C7.13935+6.23995+7.90944+5.57872+8.85574+5.57872Z'",
            # Песочные часы.
            21: "d='M5.21918+2.75893L14.7808+2.75893M5.21918+17.2411L14.7808+17.2411M7.2681+2.75893L7.2681+4.87966C7.2681+5.84001+7.55564+6.76053+8.06855+7.43938L10+10L11.9314+7.44028C12.4444+6.76053+12.7319+5.84001+12.7319+4.87966L12.7319+2.75893M7.2681+17.2411L7.2681+15.1203C7.2681+14.16+7.55564+13.2395+8.06855+12.5606L10+10L11.9314+12.5597C12.4437+13.2386+12.7319+14.16+12.7319+15.1194L12.7319+17.2411'",
            # Наполовину закрашенный круг.
            22: "d='M10.2202+16.9591C14.1272+16.841+17.2002+13.6295+17.084+9.78615C16.9679+5.94275+13.7064+2.92282+9.79945+3.04092C5.89248+3.15903+2.81943+6.37046+2.93562+10.2139C3.0518+14.0572+6.31323+17.0772+10.2202+16.9591ZM5.31621+14.9325L14.6787+5.22852C17.3944+7.72247+17.5211+11.9139+14.9611+14.5673C12.401+17.2208+8.10725+17.4242+5.31621+14.9325Z'",
            # Символ Меркурия.
            23: "d='M10+4.59955C7.87421+4.59955+6.15092+6.29206+6.15092+8.37987C6.15092+10.4677+7.87421+12.1602+10+12.1602C12.1258+12.1602+13.8491+10.4677+13.8491+8.37987C13.8491+6.29206+12.1258+4.59955+10+4.59955ZM7.80052+2.43937C7.80052+3.63233+8.78534+4.59955+10+4.59955C11.2147+4.59955+12.1995+3.63233+12.1995+2.43937M10+12.1602L10+17.5606M7.25066+14.8604L12.7493+14.8604'",
            # Знак зодиака Водолей.
            24: "d='M3.5005+8.509C4.0425+8.509+5.6675+6.509+6.2085+6.509C6.7495+6.509+7.2915+8.509+7.8335+8.509C8.3755+8.509+10.0005+6.509+10.5415+6.509C11.0835+6.509+11.6245+8.509+12.1665+8.509C12.7085+8.509+14.3335+6.509+14.8745+6.509C15.4155+6.509+15.9575+8.509+16.4995+8.509M3.5005+13.491C4.0425+13.491+5.6675+11.491+6.2085+11.491C6.7495+11.491+7.2915+13.491+7.8335+13.491C8.3755+13.491+10.0005+11.491+10.5415+11.491C11.0835+11.491+11.6245+13.491+12.1665+13.491C12.7085+13.491+14.3335+11.491+14.8745+11.491C15.4155+11.491+15.9575+13.491+16.4995+13.491'"

        }

        # Определение параметра размера символа.
        scale = 'scale(' + str(scale_value) + ')'

        # Выбор иконки по позиции цвета в ключе.
        if item == 0:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 1:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 2:
            return "<path class='glyph' " + codes[
                item] + " fill='black' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 3:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 4:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 5:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 6:
            return "<path class='glyph' " + codes[
                item] + " fill='black' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 7:
            return "<path class='glyph' " + codes[
                item] + " fill='black' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 8:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 9:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 10:
            return "<path class='glyph' " + codes[
                item] + " fill='black' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 11:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 12:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 13:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 14:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 15:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 16:
            return "<path class='glyph' " + codes[
                item] + " fill='black' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 17:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 18:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 19:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 20:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 21:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 22:
            return "<path class='glyph' " + codes[
                item] + " fill='black' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 23:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        elif item == 24:
            return "<path class='glyph' " + codes[
                item] + " fill='" + fill + "' transform='translate(" + x + " " + y + ") " + scale + "'/>"
        else:
            return ''
